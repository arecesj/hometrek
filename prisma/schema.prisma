// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// USER AND ACCOUNT
// USER AND ACCOUNT
// USER AND ACCOUNT

model User {
  id            String       @id @default(cuid())
  name          String
  image         String?
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  homeClosing   HomeClosing?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String
  provider           String?
  providerAccountId  String?  @map("provider_account_id")
  password           String?
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// HOMECLOSING
// HOMECLOSING
// HOMECLOSING

model HomeClosing {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  state       String?
  zipCode     String?     @map("zip_code")
  lenders     Lender?
  inspections Inspection?
  appraisals  Appraisal?
  insurance   Insurance?
  title       Title?
  closingDay  ClosingDay?
  tasks       Task[]
  costs       Cost?
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @updatedAt @map(name: "updated_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// LENDER
// LENDER
// LENDER

model Lender {
  id                   String           @id @default(cuid())
  homeClosingId        String?          @map("home_closing_id")
  // trek
  potentialHomePrice   String?
  potentialDownPayment String?
  selectedLender       SelectedLender?
  // manage
  hasOwnLender         Boolean?         @map("has_own_lender")
  plaidAccessToken     String?          @map("plaid_access_token")
  mortgageDetails      MortgageDetails?
  createdAt            DateTime         @default(now()) @map(name: "created_at")
  updatedAt            DateTime         @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedLender {
  id                       String   @id @default(cuid())
  lenderId                 String   @map("lender_id")
  name                     String
  nmls                     String
  minCreditScore           String   @map("min_credit_score")
  minDownPaymentPercentage String   @map("min_down_payment_percentage")
  currInterestRate         String   @map("curr_interest_rate")
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @updatedAt @map(name: "updated_at")

  lender Lender? @relation(fields: [lenderId], references: [id], onDelete: Cascade)

  @@unique([lenderId])
}

model MortgageDetails {
  id                         String   @id @default(cuid())
  lenderId                   String?  @map("lender_id")
  accountId                  String?  @map("account_id")
  accountNumber              String?  @map("account_number")
  currentLateFee             Float?   @map("current_late_fee")
  escrowBalance              Float?   @map("escrow_balance")
  hasPMI                     Boolean? @map("has_pmi")
  hasPrepaymentPenalty       Boolean? @map("has_prepayment_penalty")
  interestRatePercentage     Float?   @map("interest_rate_percentage")
  interestRateType           String?  @map("interest_rate_type")
  lastPaymentAmount          Float?   @map("last_payment_amount")
  lastPaymentDate            String?  @map("last_payment_date")
  loanTerm                   String?  @map("loan_term")
  loanTypeDescription        String?  @map("loan_type_description")
  maturityDate               String?  @map("maturity_date")
  nextMonthlyPayment         Float?   @map("next_monthly_payment")
  nextPaymentDueDate         String?  @map("next_payment_due_date")
  originationDate            String?  @map("origination_date")
  originationPrincipalAmount Float?   @map("origination_principal_amount")
  pastDueAmount              Float?   @map("past_due_amount")
  city                       String?
  country                    String?
  postalCode                 String?  @map("postal_code")
  region                     String?
  street                     String?
  ytdInterestPaid            Float?   @map("ytd_interest_paid")
  ytdPrincipalPaid           Float?   @map("ytd_principal_paid")
  createdAt                  DateTime @default(now()) @map(name: "created_at")
  updatedAt                  DateTime @updatedAt @map(name: "updated_at")

  lender Lender? @relation(fields: [lenderId], references: [id], onDelete: Cascade)

  @@unique([lenderId])
}

// INSPECTION
// INSPECTION
// INSPECTION

model Inspection {
  id                String             @id @default(cuid())
  homeClosingId     String?            @map("home_closing_id")
  // trek
  selectedInspector SelectedInspector?
  // manage
  hasInspector      Boolean?           @map("has_inspector")
  hasInspected      Boolean?           @map("has_inspected")
  inspectionDetails InspectionDetails?
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedInspector {
  id           String   @id @default(cuid())
  inspectionId String   @map("inspection_id")
  name         String
  imageURL     String   @map(name: "image_url")
  rating       Int
  distance     BigInt
  pitch        String
  location     String
  avgCost      Decimal  @map(name: "avg_cost")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  inspection Inspection? @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@unique([inspectionId])
}

model InspectionDetails {
  id           String   @id @default(cuid())
  inspectionId String?  @map("inspection_id")
  name         String?
  date         String?
  cost         String?
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  inspection Inspection? @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@unique([inspectionId])
}

// APPRAISAL
// APPRAISAL
// APPRAISAL

model Appraisal {
  id                String             @id @default(cuid())
  homeClosingId     String?            @map("home_closing_id")
  //trek
  selectedAppraiser SelectedAppraiser?
  //manage
  hasAppraiser      Boolean?           @map("has_appraiser")
  hasAppraised      Boolean?           @map("has_appraised")
  appraisalDetails  AppraisalDetails?
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedAppraiser {
  id          String   @id @default(cuid())
  appraisalId String?  @map("appraisal_id")
  name        String
  imageURL    String   @map(name: "image_url")
  rating      Int
  distance    BigInt
  pitch       String
  location    String
  avgCost     Decimal  @map(name: "avg_cost")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  appraisal Appraisal? @relation(fields: [appraisalId], references: [id], onDelete: Cascade)

  @@unique([appraisalId])
}

model AppraisalDetails {
  id          String   @id @default(cuid())
  appraisalId String?  @map("appraisal_id")
  name        String?
  date        String?
  cost        Decimal?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  appraisal Appraisal? @relation(fields: [appraisalId], references: [id], onDelete: Cascade)

  @@unique([appraisalId])
}

// INSURANCE
// INSURANCE
// INSURANCE

model Insurance {
  id                   String             @id @default(cuid())
  homeClosingId        String?            @map("home_closing_id")
  //trek
  potentialHomePrice   String?            @map("potential_home_price")
  potentialDownPayment String?            @map("potential_down_payment")
  selectedInsurance    SelectedInsurance?
  //manage
  hasInsurance         Boolean?           @map("has_insurance")
  canopyPullId         String?            @map("canopy_pulled_id")
  insuranceDetails     InsuranceDetails?
  createdAt            DateTime           @default(now()) @map(name: "created_at")
  updatedAt            DateTime           @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedInsurance {
  id          String   @id @default(cuid())
  insuranceId String?  @map("insurance_id")
  name        String
  policy      String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  insurance Insurance? @relation(fields: [insuranceId], references: [id], onDelete: Cascade)

  @@unique([insuranceId])
}

model InsuranceDetails {
  id                    String         @id @default(cuid())
  insuranceId           String?        @map("insurance_id")
  insuranceProviderName String?        @map("insurance_provider_name")
  noPolicies            Boolean?       @map("no_policies")
  noDocuments           String?        @map("no_documents")
  policy                PolicyDetails?
  agent                 AgentDetails?
  createdAt             DateTime       @default(now()) @map(name: "created_at")
  updatedAt             DateTime       @updatedAt @map(name: "updated_at")

  insurance Insurance? @relation(fields: [insuranceId], references: [id], onDelete: Cascade)

  @@unique([insuranceId])
}

model PolicyDetails {
  id                               String         @id @default(cuid())
  insuranceDetailsId               String?        @map("insurance_details_id")
  policyId                         String?        @map("policy_id")
  name                             String?
  description                      String?
  carrierPolicyNumber              String?        @map("carrier_policy_number")
  policyType                       String?        @map("policy_type")
  effectiveDate                    String?        @map("effective_date")
  expiryDate                       String?        @map("expiry_date")
  renewalDate                      String?        @map("renewal_date")
  canceledDate                     String?        @map("canceled_date")
  totalPremiumCents                Int?           @map("total_premium_cents")
  carrierName                      String?        @map("carrier_name")
  status                           String?
  limitedAccess                    Boolean?       @map("limited_access")
  formOfBusiness                   String?        @map("form_of_business")
  deductibleCents                  Int?           @map("deductible_cents")
  paidInFull                       Boolean?       @map("paid_in_full")
  amountDueCents                   Int?           @map("amount_due_cents")
  amountPaidCents                  Int?           @map("amount_paid_cents")
  isSelected                       Boolean?       @map("is_selected")
  totalEstimatedAnnualPremiumCents Int?           @map("total_estimated_annual_premium_cents")
  totalMinimumPremiumCents         Int?           @map("total_minimum_premium_cents")
  totalDepositPremiumCents         Int?           @map("total_deposit_premium_cents")
  isMonoline                       Boolean?       @map("is_monoline")
  dwellings                        Dwelling?
  namedInsureds                    NamedInsured[]
  createdAt                        DateTime       @default(now()) @map(name: "created_at")
  updatedAt                        DateTime       @updatedAt @map(name: "updated_at")

  insuranceDetails InsuranceDetails? @relation(fields: [insuranceDetailsId], references: [id], onDelete: Cascade)

  @@unique([insuranceDetailsId])
}

model Dwelling {
  id                             String            @id @default(cuid())
  policyDetailsId                String?           @map("policy_details_id")
  dwellingId                     String?           @map("dwelling_id")
  replacementCostCents           Int?              @map("replacement_cost_cents")
  cashValueCents                 Int?              @map("cash_value_cents")
  propertyDataFetched            Boolean?          @map("property_data_fetched")
  lossSettlementType             String?           @map("loss_settlement_type")
  extendedReplacementCostPercent Int?              @map("extended_replacement_cost_percent")
  addressId                      String?           @map("address_id")
  fullAddress                    String?           @map("full_address")
  country                        String?
  addressNature                  String?           @map("address_nature")
  number                         String?
  street                         String?
  addressType                    String?           @map("address_type")
  city                           String?
  state                          String?
  secUnitType                    String?           @map("sec_unit_type")
  secUnitNum                     String?           @map("sec_unit_num")
  zip                            String?
  coverages                      CoverageDetails[]
  propertyData                   PropertyData?
  createdAt                      DateTime          @default(now()) @map(name: "created_at")
  updatedAt                      DateTime          @updatedAt @map(name: "updated_at")

  policyDetails PolicyDetails? @relation(fields: [policyDetailsId], references: [id], onDelete: Cascade)

  @@unique([policyDetailsId])
}

model CoverageDetails {
  id                      String   @id @default(cuid())
  dwellingId              String?  @map("dwelling_id")
  dwellingCoverageId      String?  @map("dwelling_coverage_id")
  name                    String?
  friendlyName            String?  @map("friendly_name")
  premiumCents            Int?     @map("premium_cents")
  perPersonLimitCents     Int?     @map("per_person_limit_cents")
  perPersonUnlimited      Boolean? @map("per_person_unlimited")
  perIncidentLimitCents   Int?     @map("per_incident_limit_cents")
  perIncidentUnlimited    Boolean? @map("per_incident_unlimited")
  perIncidentLimitPercent Int?     @map("per_incident_limit_percent")
  deductibleCents         Int?     @map("deductible_cents")
  deductiblePercent       String?  @map("deductible_precent")
  isDeclined              Boolean? @map("is_declined")
  createdAt               DateTime @default(now()) @map(name: "created_at")
  updatedAt               DateTime @updatedAt @map(name: "updated_at")

  dwelling Dwelling? @relation(fields: [dwellingId], references: [id], onDelete: Cascade)

  @@unique([dwellingId])
}

model PropertyData {
  id                            String   @id @default(cuid())
  dwellingId                    String?  @map("dwelling_id")
  canopyDwellingId              String?  @map("canopy_dwelling_id")
  propertyDataId                String?  @map("property_data_id")
  apn                           String?
  class                         String?
  subType                       String?  @map("sub_type")
  yearBuilt                     Int?     @map("year_built")
  constructionType              String?  @map("construction_type")
  wallType                      String?  @map("wall_type")
  foundationType                String?  @map("foundation_type")
  frameType                     String?  @map("frame_type")
  roofCover                     String?  @map("roof_cover")
  roofShape                     String?  @map("roof_shape")
  coolingType                   String?  @map("cooling_type")
  heatingType                   String?  @map("heating_type")
  heatingFuel                   String?  @map("heating_fuel")
  energyType                    String?  @map("energy_type")
  sewerType                     String?  @map("sewer_type")
  buildingShape                 String?  @map("building_shape")
  constructionQuality           String?  @map("construction_quality")
  hasFireplace                  Boolean? @map("has_fireplace")
  numFireplaces                 Int?     @map("num_fireplaces")
  fireplaceType                 String?  @map("fireplace_type")
  hasPool                       Boolean? @map("has_pool")
  poolType                      String?  @map("pool_type")
  squareFt                      Int?     @map("square_ft")
  numBeds                       Int?     @map("num_beds")
  numBathsFull                  Int?     @map("num_baths_full")
  numBathsPartial               Int?     @map("num_baths_partial")
  numStories                    Int?     @map("num_stories")
  numUnits                      Int?     @map("num_units")
  garageType                    String?  @map("garage_type")
  garageSquareFt                Int?     @map("garage_square_ft")
  numParkingSpaces              Int?     @map("num_parking_spaces")
  assessedImprovementValueCents Int?     @map("assessed_improvement_value_cents")
  assessedLandValueCents        Int?     @map("assessed_land_value_cents")
  assessedTotalValueCents       Int?     @map("assessed_total_value_cents")
  marketImprovementValueCents   Int?     @map("market_improvement_value_cents")
  marketLandValueCents          Int?     @map("market_land_value_cents")
  marketTotalValueCents         Int?     @map("market_total_value_cents")
  owner1FirstName               String?  @map("owner1_first_name")
  owner1LastName                String?  @map("owner1_last_name")
  owner2FirstName               String?  @map("owner2_first_name")
  owner2LastName                String?  @map("owner2_last_name")
  owner3FirstName               String?  @map("owner3_first_name")
  owner3LastName                String?  @map("owner3_last_name")
  owner4FirstName               String?  @map("owner4_first_name")
  owner4LastName                String?  @map("owner4_last_name")
  firstMortgageAmountCents      Int?     @map("first_mortgage_amount_cents")
  firstMortgageLender           String?  @map("first_mortgage_lender")
  secondMortgageAmountCents     Int?     @map("second_mortgage_amount_cents")
  secondMortgageLender          String?  @map("second_mortgage_lender")
  purchaseDate                  String?  @map("purchase_date")
  purchasePriceCents            Int?     @map("purchase_price_cents")
  lastUpdateDate                String?  @map("last_update_date")
  createdAt                     DateTime @default(now()) @map(name: "created_at")
  updatedAt                     DateTime @updatedAt @map(name: "updated_at")

  dwelling Dwelling? @relation(fields: [dwellingId], references: [id], onDelete: Cascade)

  @@unique([dwellingId])
}

model NamedInsured {
  id                    String   @id @default(cuid())
  policyDetailsId       String?  @map("policy_details_id")
  namedInsuredId        String?  @map("named_insured_id")
  firstName             String?  @map("first_name")
  middleName            String?  @map("middle_name")
  lastName              String?  @map("last_name")
  fullName              String?  @map("full_name")
  isPrimaryNamedInsured Boolean? @map("is_primary_named_insured")
  createdAt             DateTime @default(now()) @map(name: "created_at")
  updatedAt             DateTime @updatedAt @map(name: "updated_at")

  policyDetails PolicyDetails? @relation(fields: [policyDetailsId], references: [id], onDelete: Cascade)

  @@unique([policyDetailsId])
}

model AgentDetails {
  id                 String  @id @default(cuid())
  insuranceDetailsId String? @map("insurance_details_id")
  agentInfoId        String? @map("agent_info_id")
  addressId          String? @map("address_id_id")
  agencyName         String? @map("agent_name")
  agentFullName      String? @map("agent_full_name")
  phoneNumber        String? @map("phone_number")
  email              String?
  policyIds          String? @map("policyIds")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  insuranceDetails InsuranceDetails? @relation(fields: [insuranceDetailsId], references: [id], onDelete: Cascade)

  @@unique([insuranceDetailsId])
}

// TITLE
// TITLE
// TITLE

model Title {
  id                 String              @id @default(cuid())
  homeClosingId      String?             @map("home_closing_id")
  // trek
  selectedTitleAgent SelectedTitleAgent?
  //manage
  hasTitleAgent      Boolean?            @map("has_title_agent")
  hasTitleTransfer   Boolean?            @map("has_title_transfer")
  titleDetails       TitleDetails?
  createdAt          DateTime            @default(now()) @map(name: "created_at")
  updatedAt          DateTime            @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedTitleAgent {
  id        String   @id @default(cuid())
  titleId   String?  @map("title_id")
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  title Title? @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([titleId])
}

model TitleDetails {
  id           String    @id @default(cuid())
  titleId      String?   @map("title_id")
  name         String?
  date         DateTime?
  cost         Decimal?
  transferDate DateTime?
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  title Title? @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([titleId])
}

// CLOSING DAY
// CLOSING DAY
// CLOSING DAY

model ClosingDay {
  id            String   @id @default(cuid())
  homeClosingId String?  @map("home_closing_id")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

// TASK
// TASK
// TASK

model Task {
  id            String   @id @default(cuid())
  homeClosingId String?  @map("home_closing_id")
  category      String
  task          String
  status        String
  priority      String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)
}

// COST
// COST
// COST

model Cost {
  id            String   @id @default(cuid())
  homeClosingId String?  @map("home_closing_id")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

// PARTNERSHIPS
// PARTNERSHIPS
// PARTNERSHIPS

model HomeTrekOfferedLenders {
  id                       String   @id @default(cuid())
  name                     String
  nmls                     String
  imageURL                 String   @map(name: "image_url")
  rating                   Int
  distance                 BigInt
  pitch                    String
  location                 String
  minCreditScore           Int
  minDownPaymentPercentage Int
  currInterestRate         Decimal
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedInspectors {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedAppraisers {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedInsurer {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedTitleAgents {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedTitleInsurance {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

// SESSION AND LOGIN
// SESSION AND LOGIN
// SESSION AND LOGIN

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
