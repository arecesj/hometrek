// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// USER AND ACCOUNT
// USER AND ACCOUNT
// USER AND ACCOUNT

model User {
  id            String       @id @default(cuid())
  name          String
  image         String?
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  homeClosing   HomeClosing?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String
  provider           String?
  providerAccountId  String?  @map("provider_account_id")
  password           String?
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// HOMECLOSING
// HOMECLOSING
// HOMECLOSING

model HomeClosing {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  state       String?
  zipCode     String?
  lenders     Lender?
  inspections Inspection?
  appraisals  Appraisal?
  insurance   Insurance?
  title       Title?
  closingDay  ClosingDay?
  tasks       Task[]
  costs       Cost?
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// LENDER
// LENDER
// LENDER

model Lender {
  id                   String           @id @default(cuid())
  homeClosingId        String?          @map("home_closing_id")
  // trek
  potentialHomePrice   String?
  potentialDownPayment String?
  selectedLender       SelectedLender?
  // manage
  hasOwnLender         Boolean?
  plaidAccessToken     String?
  mortgageDetails      MortgageDetails?
  createdAt            DateTime         @default(now()) @map(name: "created_at")
  updatedAt            DateTime         @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedLender {
  id                       String   @id @default(cuid())
  lenderId                 String   @map("lender_id")
  name                     String
  nmls                     String
  minCreditScore           String
  minDownPaymentPercentage String
  currInterestRate         String
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @updatedAt @map(name: "updated_at")

  lender Lender? @relation(fields: [lenderId], references: [id], onDelete: Cascade)

  @@unique([lenderId])
}

model MortgageDetails {
  id        String   @id @default(cuid())
  lenderId  String?  @map("lender_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  lender Lender? @relation(fields: [lenderId], references: [id], onDelete: Cascade)

  @@unique([lenderId])
}

// INSPECTION
// INSPECTION
// INSPECTION

model Inspection {
  id                String             @id @default(cuid())
  homeClosingId     String?            @map("home_closing_id")
  // trek
  selectedInspector SelectedInspector?
  // manage
  hasInspector      Boolean?
  hasInspected      Boolean?
  inspectionDetails InspectionDetails?
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedInspector {
  id           String   @id @default(cuid())
  inspectionId String   @map("inspection_id")
  name         String
  imageURL     String   @map(name: "image_url")
  rating       Int
  distance     BigInt
  pitch        String
  location     String
  avgCost      Decimal  @map(name: "avg_cost")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  inspection Inspection? @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@unique([inspectionId])
}

model InspectionDetails {
  id           String    @id @default(cuid())
  inspectionId String?   @map("inspection_id")
  name         String?
  date         DateTime?
  cost         Decimal?
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  inspection Inspection? @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@unique([inspectionId])
}

// APPRAISAL
// APPRAISAL
// APPRAISAL

model Appraisal {
  id                String             @id @default(cuid())
  homeClosingId     String?            @map("home_closing_id")
  //trek
  selectedAppraiser SelectedAppraiser?
  //manage
  hasAppraiser      Boolean?
  hasAppraised      Boolean?
  appraisalDetails  AppraisalDetails?
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedAppraiser {
  id          String   @id @default(cuid())
  appraisalId String?  @map("appraisal_id")
  name        String
  imageURL    String   @map(name: "image_url")
  rating      Int
  distance    BigInt
  pitch       String
  location    String
  avgCost     Decimal  @map(name: "avg_cost")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  appraisal Appraisal? @relation(fields: [appraisalId], references: [id], onDelete: Cascade)

  @@unique([appraisalId])
}

model AppraisalDetails {
  id          String    @id @default(cuid())
  appraisalId String?   @map("appraisal_id")
  name        String?
  date        DateTime?
  cost        Decimal?
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  appraisal Appraisal? @relation(fields: [appraisalId], references: [id], onDelete: Cascade)

  @@unique([appraisalId])
}

// INSURANCE
// INSURANCE
// INSURANCE

model Insurance {
  id                   String             @id @default(cuid())
  homeClosingId        String?            @map("home_closing_id")
  //trek
  potentialHomePrice   String?
  potentialDownPayment String?
  selectedInsurance    SelectedInsurance?
  //manage
  hasInsurance         Boolean?
  // TODO: canopyAccessToken?
  // TODO: Figure this out after connecting with Canopy
  insuranceDetails     InsuranceDetails?
  createdAt            DateTime           @default(now()) @map(name: "created_at")
  updatedAt            DateTime           @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedInsurance {
  id          String   @id @default(cuid())
  insuranceId String?  @map("insurance_id")
  name        String
  policy      String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  insurance Insurance? @relation(fields: [insuranceId], references: [id], onDelete: Cascade)

  @@unique([insuranceId])
}

model InsuranceDetails {
  id          String  @id @default(cuid())
  insuranceId String? @map("insurance_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  insurance Insurance? @relation(fields: [insuranceId], references: [id], onDelete: Cascade)

  @@unique([insuranceId])
}

// TITLE
// TITLE
// TITLE

model Title {
  id                 String              @id @default(cuid())
  homeClosingId      String?             @map("home_closing_id")
  // trek
  selectedTitleAgent SelectedTitleAgent?
  //manage
  hasTitleAgent      Boolean?
  hasTitleTransfer   Boolean?
  titleDetails       TitleDetails?
  createdAt          DateTime            @default(now()) @map(name: "created_at")
  updatedAt          DateTime            @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

model SelectedTitleAgent {
  id        String   @id @default(cuid())
  titleId   String?  @map("title_id")
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  title Title? @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([titleId])
}

model TitleDetails {
  id           String    @id @default(cuid())
  titleId      String?   @map("title_id")
  name         String?
  date         DateTime?
  cost         Decimal?
  transferDate DateTime?
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  title Title? @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([titleId])
}

// CLOSING DAY
// CLOSING DAY
// CLOSING DAY

model ClosingDay {
  id            String   @id @default(cuid())
  homeClosingId String?  @map("home_closing_id")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

// TASK
// TASK
// TASK

model Task {
  id            String   @id @default(cuid())
  homeClosingId String?  @map("home_closing_id")
  category      String
  task          String
  status        String
  priority      String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

// COST
// COST
// COST

model Cost {
  id            String   @id @default(cuid())
  homeClosingId String?  @map("home_closing_id")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  homeClosing HomeClosing? @relation(fields: [homeClosingId], references: [id], onDelete: Cascade)

  @@unique([homeClosingId])
}

// PARTNERSHIPS
// PARTNERSHIPS
// PARTNERSHIPS

model HomeTrekOfferedLenders {
  id                       String   @id @default(cuid())
  name                     String
  nmls                     String
  imageURL                 String   @map(name: "image_url")
  rating                   Int
  distance                 BigInt
  pitch                    String
  location                 String
  minCreditScore           Int
  minDownPaymentPercentage Int
  currInterestRate         Decimal
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedInspectors {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedAppraisers {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedInsurer {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedTitleAgents {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model HomeTrekOfferedTitleInsurance {
  id        String   @id @default(cuid())
  name      String
  imageURL  String   @map(name: "image_url")
  rating    Int
  distance  BigInt
  pitch     String
  location  String
  avgCost   Decimal  @map(name: "avg_cost")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

// SESSION AND LOGIN
// SESSION AND LOGIN
// SESSION AND LOGIN

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
